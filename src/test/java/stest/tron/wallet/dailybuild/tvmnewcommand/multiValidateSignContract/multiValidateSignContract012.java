package stest.tron.wallet.dailybuild.tvmnewcommand.multiValidateSignContract;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Optional;
import java.util.concurrent.TimeUnit;
import lombok.extern.slf4j.Slf4j;
import org.junit.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Test;
import org.tron.api.WalletGrpc;
import org.tron.api.WalletSolidityGrpc;
import org.tron.common.crypto.ECKey;
import org.tron.common.utils.ByteArray;
import org.tron.common.utils.Utils;
import org.tron.core.Wallet;
import org.tron.protos.Protocol.TransactionInfo;
import stest.tron.wallet.common.client.Configuration;
import stest.tron.wallet.common.client.Parameter;
import stest.tron.wallet.common.client.utils.AbiUtil;
import stest.tron.wallet.common.client.utils.PublicMethed;

@Slf4j
public class multiValidateSignContract012 {

  private final String testNetAccountKey = Configuration.getByPath("testng.conf")
      .getString("foundationAccount.key2");
  private final byte[] testNetAccountAddress = PublicMethed
      .getFinalAddress(testNetAccountKey);
  private Long maxFeeLimit = Configuration.getByPath("testng.conf")
      .getLong("defaultParameter.maxFeeLimit");

  private ManagedChannel channelFull = null;
  private WalletGrpc.WalletBlockingStub blockingStubFull = null;

  private ManagedChannel channelFull1 = null;
  private WalletGrpc.WalletBlockingStub blockingStubFull1 = null;


  private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity = null;

  private String fullnode = Configuration.getByPath("testng.conf")
      .getStringList("fullnode.ip.list").get(0);
  private String fullnode1 = Configuration.getByPath("testng.conf")
      .getStringList("fullnode.ip.list").get(1);

  byte[] contractAddress = null;
  String txid;

  ECKey ecKey1 = new ECKey(Utils.getRandom());
  byte[] contractExcAddress = ecKey1.getAddress();
  String contractExcKey = ByteArray.toHexString(ecKey1.getPrivKeyBytes());

  @BeforeSuite
  public void beforeSuite() {
    Wallet wallet = new Wallet();
    Wallet.setAddressPreFixByte(Parameter.CommonConstant.ADD_PRE_FIX_BYTE_MAINNET);
  }

  /**
   * constructor.
   */

  @BeforeClass(enabled = true)
  public void beforeClass() {
    PublicMethed.printAddress(contractExcKey);
    channelFull = ManagedChannelBuilder.forTarget(fullnode)
        .usePlaintext(true)
        .build();
    blockingStubFull = WalletGrpc.newBlockingStub(channelFull);
    channelFull1 = ManagedChannelBuilder.forTarget(fullnode1)
        .usePlaintext(true)
        .build();
    blockingStubFull1 = WalletGrpc.newBlockingStub(channelFull1);
    txid = PublicMethed
        .sendcoinGetTransactionId(contractExcAddress, 10000000000L, testNetAccountAddress,
            testNetAccountKey,
            blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    String filePath = "src/test/resources/soliditycode/multivalidatesign005.sol";
    String contractName = "Demo";
    HashMap retMap = PublicMethed.getBycodeAbi(filePath, contractName);
    String code = retMap.get("byteCode").toString();
    String abi = retMap.get("abI").toString();
    contractAddress = PublicMethed
        .deployContract(contractName, abi, code, "", maxFeeLimit,
            0L, 100, null, contractExcKey,
            contractExcAddress, blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
  }

  @Test(enabled = true, description = "Trigger precompile multivalisign function with correct data")
  public void test01TriggerPrecompileMultivalisignWithCorrectData() {
    String input = "da586d882fbfa26b34f018ed3f4c95164d5596a5b527b8552b8d96e9424b93a32bcc8a1900000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000aebfa9adb47d1262356e4a133c0b38a6ee456ff7784e8274812d76fb0ecc46a391579c3bb1fe32dcb4b832d45d8191d46b3945f1b0c7fbbb9043a6a29f0b7270601000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041590477008c3827a09238cbf951285bbeb6d2a05af2d211f4fb6e93d633cdc5f75ae1ea05d2ddf0fc5c136dbf46bf0bb41fc45ddbe11e7b607b3deed17242bfc800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041f6ee687a0db6f86d5b84c5ad8a61a67dbb1a898e0f9adf8b9e42e896180a61d828fe48622a425659077b0969aee4251d124d7f871cdb0f262a6030755a9e564500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041f98cad7ca74be167b3097736f3d28311aa1f2cdd733959d16e8de168d27429394ee9696b8a3d2c76f43194921ce79d8e689bc59527ba6b88558a71cd8b3e58b4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000417e5174d1af90ddec28e4cb38da2db70be1406ce9ce989e93829ec6a671be4eba3c3f57ffe8b65a5942d444fb0bd49e5679aae3cb7d7db9a8d40ce901d167fe350100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004100ae9ef3926f5ec310a9bc60b51ad9c85d621adde4bb3edebd36c3191d4e0786005b914abad15a60988a92978e95cd7d9db025101449c755ce47d3c2a7d42ba800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041cc8104edfc01e1a5bfa1276e74fe12f8fbc44ac586424be86638734697e05ef3655018e7a43726cf7a3eca83d344de4dc5528a72ca40f264024b3c1aea8845cf0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004144297c74b4907cb3a3987df68991862ba84bee0bee53cfadebbf34a9bde9afaa4278c9843a8519fd917d862fd2231ba922ed1b356faa25eb0bf9ecf594cbc868010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000417cd548fdf822eed2154b6c7934c975dc6ac9db41f951d4508538795901eaffba1bfa2368f06909784aee4495c1ba8e70ddff3585029fd42d367775e119efc6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004138813433312da499f27a1da5194bad6351707ec963b660d743bd7eafe56b22a97edc69b2945e5b52666f9c3a491ec192438ad888c40aefaa8c58c197fe00fcfe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041ba83f6ac25567abff6e5508fae1753de61c776b86dd06f8f5e93c6a367d212142c126b7d0a7cd0ea9f5790b5fb5333f2e68abffa4602fd0cfbb977b9ed95457d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000417889e0d5c2e8ebad33b64fa97da1d368a6df400a8a1efe7ea51e9ec335077c167346f1cb649ff97c4ed7a2052d0318ab5a19ade85d436e830dedca274d23f89f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041ec3a74fea8402a516d32a32df7eb108aed021e903666b881bae61b109be1b4a662f4d6532b52eadf8a639f4d785dc72ca12cde0eff3a94ce7ef4d3416a9f45bc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004117a15b2115f3a2e09426d8a82efc70b4472b1110aa992f8462e6862b23ec4d8e6e320c4505c86547abc2e3481d1364492324a84ece557532aae2c5d3dfc29c5c010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000418b6234e802039bec6ecdf037c2a97c94377a0f4702ac03dca8ef6d9a1378bb49505f44d442fa91f02c3602bd781a3d973c7a60a9e59a9263b6a104bdc284c2fd01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041896c677c0d79d5a3e0fc2e007a99c92180d86216326c88fe6ca1970267f326985813c79fba0356fa4af9756f779396484b444fc2822c17210ac47ddf74672f6d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000041ce77ceccad7d4dd6e6fd19273b2bf96b51d1187b000000000000000000000041b8221ee97658c68f92ee7c6b4952d696268c1e9f0000000000000000000000415b5cfbed660ff17022a5adc8ea0a179a97ac4a06000000000000000000000041233e869247693e34f9ff2c3e9a3f30b32eefa899000000000000000000000041058a1dbcd7997eb5e51c729a6af973083af3288d0000000000000000000000416a65fcf4c27a3f3dcb187b1a039dbeaa37866b5d000000000000000000000041bd2768a4209e931cfb764a4e62edb6a420330dff00000000000000000000004173d5c0b68d0c98a3471f635c680f33106c3e805a0000000000000000000000415df6060ab5bbae3f919ffd6d66a2dca1188244fb0000000000000000000000414dd65ad6db60b7c3df7b1a7da8241bbdaa6671b500000000000000000000004125e56674a9c3a731e14e1c3c8606a583601c1810000000000000000000000041be70d0f942db4777243a825d71ec6a0d781bb49a0000000000000000000000418cbcd33b6b2c1aa0eb36607f9e076930c88696d4000000000000000000000041378a17853f41628c5807b90ed079f0f409c89a9200000000000000000000004194bc3d469f295fd9350ba459543d8745398368e500000000000000000000004145582e0c7af3db12348809b2197fcfb4ce22b2f7";

    String method = "testArray2(bytes)";
    AbiUtil.parseMethod(method, Arrays.asList(input));
    txid = PublicMethed.triggerContract(contractAddress,
        method, AbiUtil.parseParameters(method, Arrays.asList(input)), true,
        0, maxFeeLimit, contractExcAddress, contractExcKey, blockingStubFull);
    PublicMethed.getTransactionById(txid, blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = null;
    infoById = PublicMethed.getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(0, infoById.get().getResultValue());
    logger
        .info(
            "infoById:" + ByteArray.toHexString(infoById.get().getContractResult(0).toByteArray()));
    Assert
        .assertTrue(ByteArray.toHexString(infoById.get().getContractResult(0).toByteArray()).equals(
            "0000000000000000000000000000000000000000000000000000000000000001"
                + "0000000000000000000000000000000000000000000000000000000000000040"
                + "0000000000000000000000000000000000000000000000000000000000000020"
                + "0101010101010101010101010101010100000000000000000000000000000000"));
             /*0000000000000000000000000000000000000000000000000000000000000001
                   0000000000000000000000000000000000000000000000000000000000000040
                   0000000000000000000000000000000000000000000000000000000000000020
                   0000000000000000000000000000000000000000000000000000000000000000*/

  }

  @Test(enabled = true, description = "Trigger precompile multivalidatesign function with incor"
      + "rect data")
  public void test02TriggerPrecompileMultivalisignWithIncorrectData() {
    String input = "da586d88a4510d00de332515bd3cc6b2e3c49888717ffd74391de4f8c7d7e59b30de6bfb000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000000d00000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000000000000000000000000000000000000000062000000000000000000000000000000000000000000000000000000000000006a0000000000000000000000000000000000000000000000000000000000000072000000000000000000000000000000000000000000000000000000000000007a00000000000000000000000000000000000000000000000000000000000000041fdeba02ebfd114453ad31b7dfc446ceb5110ac41fc51fe03bb8c9967bc64dcf305c85c99b9966691614fb9aea3389d3cc32442e44fdd7f9287925eca4a97975d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000413494def42b2a7418e7a0186bcce85fad3a9f76af33463df06c1d3096431fdd507d8750b0cca0613590c75d96592d47193ebadfde59e8a866d831e918e5a7bf440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004136c6ef57fb9cd220d514d44ca00091cbed05287cb9f8d286834e1bf29c944ef03ae3a634f3ae6f8977a28c27ac8ad85ffce5152e1bcf1762164b23fb78c542990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004152e089f4b8261aed38759c884160115a393a024a908f5f5930c95309ddf008cf3ac510ad0274e451e89ebaf751026cecc77feb82b71b185cb718dc8a3259fed600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041253f6510ea34aa5ad4c452d35ef6f1ec66ca353fd590561a3fef00a6beab84746bc302c3fcd5f0df6a86cd6d1fc8caca60521cbeb45021e1f9b1d5d4c906043f010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000413d6dfb6de7a868c56c640d26e8b6137780d4a3e1a64aa35d6f74ac09a05b674616fb99026ed803d3936c07804a1d754115fab0e065b8dd1142621cd4bdd9e9b70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004135b89f09d1659f4e6a884d457ceae1ea216a4f2898cdf5eb111044742eab6851021c5c6121750ff69645a01e0afe975a64faf8b73f78793ea7b66c3ef873c78f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041d4a2e99dd7d47932b4c712b82f90ccbc0182e552e9c7873669a8c7efb00df57312da94ce3080d383c2c297a73be8b60af21c6e8e5b4ebb5eaa6a7764f2de940c01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041c801328071210ec90868b765364bdf50f5dae6b30ac71f8de0223e68de0a2fff290ea765202031fac3d149fa241bc36d463c2e22f61fcb84d560b4ed6f084d84000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000411204607443f1dbc7bd3d260c58dd86ca10bfc1fc3a6928821cc4c3e50539cf896e969fc616963c3c6290a59edcc42b2b9a0fa48c9a4662c295cc4ed7e2374afc01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041393a55f1c93632ee47a59d9349c1520a56e48b21285c1e2ea46ccf540c9429366add8ee1ecc1003f99f4442d4581b0e3c11b9a20e9768fe66d26bdab861a50b501000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041163160854fda9d1b9832028497901423fbfdfe8324e7eebc56e842424a57c9725dd2cf25e9f0ca9a9b20f06d0cff1c594b6f0f0d1427ac816d8d05d26d80b83c0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004102d655ea7b295c1ddc4da1c5d4f0ad447e61425dee5d4f6eb4ee099df762aff9013675103083c2f905c7d0b97d2354c1050bbe876b11e27b826a05a576b009fa0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d000000000000000000000041f0bfdc80a2555399e89200e5e090ee27630489350000000000000000000000418335c39be82898d98a735f1df3245a9c91731b9e00000000000000000000004113fa1dba29e866f2961b650b3e6d93ded39167860000000000000000000000413a02c796035cc6357f4ae33a1db3ad3c87ce5e670000000000000000000000414e93a2fc5f7ec9941be1ad4e835bbd57154c513b000000000000000000000041ee083877c634b2e45e1bce655c2c58828ef695bc000000000000000000000041f7f358043a91940c309816ca4e1a5a8a043a0a9a000000000000000000000041c20c5159cc085fe1436491146a8d9aab9212492c000000000000000000000041c356beb78f89ded6597375af59f30f19707437f30000000000000000000000418812428e843c2d855ef002f1ea61b75ac27157180000000000000000000000412259a327183215ae3cf82284fc1f04b22d79e99700000000000000000000004153b0cf8fae6bf65247d20463f6761d28f676a120000000000000000000000041de6fa771c4443ba986516f695c3f3517744ef452";

    String method = "testArray2(bytes)";
    AbiUtil.parseMethod(method, Arrays.asList(input));
    txid = PublicMethed.triggerContract(contractAddress,
        method, AbiUtil.parseParameters(method, Arrays.asList(input)), true,
        0, maxFeeLimit, contractExcAddress, contractExcKey, blockingStubFull);
    PublicMethed.getTransactionById(txid, blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = null;
    infoById = PublicMethed.getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(0, infoById.get().getResultValue());
    logger
        .info(
            "infoById:" + ByteArray.toHexString(infoById.get().getContractResult(0).toByteArray()));
    Assert
        .assertTrue(ByteArray.toHexString(infoById.get().getContractResult(0).toByteArray()).equals(
            "0000000000000000000000000000000000000000000000000000000000000001"
                + "0000000000000000000000000000000000000000000000000000000000000040"
                + "0000000000000000000000000000000000000000000000000000000000000020"
                + "0001010101010101010101010101010100000000000000000000000000000000"));
  }
             /*0000000000000000000000000000000000000000000000000000000000000001
                   0000000000000000000000000000000000000000000000000000000000000040
                   0000000000000000000000000000000000000000000000000000000000000020
                   0000000000000000000000000000000000000000000000000000000000000000*/
  /**
   * constructor.
   */
  @AfterClass
  public void shutdown() throws InterruptedException {
    long balance = PublicMethed.queryAccount(contractExcKey, blockingStubFull)
        .getBalance();
    PublicMethed
        .sendcoin(testNetAccountAddress, balance, contractExcAddress, contractExcKey,
            blockingStubFull);
    if (channelFull != null) {
      channelFull.shutdown().awaitTermination(5, TimeUnit.SECONDS);
    }
    if (channelFull1 != null) {
      channelFull1.shutdown().awaitTermination(5, TimeUnit.SECONDS);
    }
  }

}
